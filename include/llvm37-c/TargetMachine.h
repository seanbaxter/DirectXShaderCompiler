/*===-- llvm37-c/TargetMachine.h - Target Machine Library C Interface - C++ -*-=*\
|*                                                                            *|
|*                     The LLVM37 Compiler Infrastructure                       *|
|*                                                                            *|
|* This file is distributed under the University of Illinois Open Source      *|
|* License. See LICENSE.TXT for details.                                      *|
|*                                                                            *|
|*===----------------------------------------------------------------------===*|
|*                                                                            *|
|* This header declares the C interface to the Target and TargetMachine       *|
|* classes, which can be used to generate assembly or object files.           *|
|*                                                                            *|
|* Many exotic languages can interoperate with C code but have a harder time  *|
|* with C++ due to name mangling. So in addition to C, this interface enables *|
|* tools written in such languages.                                           *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/

#ifndef LLVM37_C_TARGETMACHINE_H
#define LLVM37_C_TARGETMACHINE_H

#include "llvm37-c/Core.h"
#include "llvm37-c/Target.h"

#ifdef __cplusplus
extern "C" {
#endif
typedef struct LLVM37OpaqueTargetMachine *LLVM37TargetMachineRef;
typedef struct LLVM37Target *LLVM37TargetRef;

typedef enum {
    LLVM37CodeGenLevelNone,
    LLVM37CodeGenLevelLess,
    LLVM37CodeGenLevelDefault,
    LLVM37CodeGenLevelAggressive
} LLVM37CodeGenOptLevel;

typedef enum {
    LLVM37RelocDefault,
    LLVM37RelocStatic,
    LLVM37RelocPIC,
    LLVM37RelocDynamicNoPic
} LLVM37RelocMode;

typedef enum {
    LLVM37CodeModelDefault,
    LLVM37CodeModelJITDefault,
    LLVM37CodeModelSmall,
    LLVM37CodeModelKernel,
    LLVM37CodeModelMedium,
    LLVM37CodeModelLarge
} LLVM37CodeModel;

typedef enum {
    LLVM37AssemblyFile,
    LLVM37ObjectFile
} LLVM37CodeGenFileType;

/** Returns the first llvm37::Target in the registered targets list. */
LLVM37TargetRef LLVM37GetFirstTarget(void);
/** Returns the next llvm37::Target given a previous one (or null if there's none) */
LLVM37TargetRef LLVM37GetNextTarget(LLVM37TargetRef T);

/*===-- Target ------------------------------------------------------------===*/
/** Finds the target corresponding to the given name and stores it in \p T.
  Returns 0 on success. */
LLVM37TargetRef LLVM37GetTargetFromName(const char *Name);

/** Finds the target corresponding to the given triple and stores it in \p T.
  Returns 0 on success. Optionally returns any error in ErrorMessage.
  Use LLVM37DisposeMessage to dispose the message. */
LLVM37Bool LLVM37GetTargetFromTriple(
    const char* Triple, 
    LLVM37TargetRef *T,
    _Out_opt_ char **ErrorMessage);

/** Returns the name of a target. See llvm37::Target::getName */
const char *LLVM37GetTargetName(LLVM37TargetRef T);

/** Returns the description  of a target. See llvm37::Target::getDescription */
const char *LLVM37GetTargetDescription(LLVM37TargetRef T);

/** Returns if the target has a JIT */
LLVM37Bool LLVM37TargetHasJIT(LLVM37TargetRef T);

/** Returns if the target has a TargetMachine associated */
LLVM37Bool LLVM37TargetHasTargetMachine(LLVM37TargetRef T);

/** Returns if the target as an ASM backend (required for emitting output) */
LLVM37Bool LLVM37TargetHasAsmBackend(LLVM37TargetRef T);

/*===-- Target Machine ----------------------------------------------------===*/
/** Creates a new llvm37::TargetMachine. See llvm37::Target::createTargetMachine */
LLVM37TargetMachineRef LLVM37CreateTargetMachine(LLVM37TargetRef T,
  const char *Triple, const char *CPU, const char *Features,
  LLVM37CodeGenOptLevel Level, LLVM37RelocMode Reloc, LLVM37CodeModel CodeModel);

/** Dispose the LLVM37TargetMachineRef instance generated by
  LLVM37CreateTargetMachine. */
void LLVM37DisposeTargetMachine(LLVM37TargetMachineRef T);

/** Returns the Target used in a TargetMachine */
LLVM37TargetRef LLVM37GetTargetMachineTarget(LLVM37TargetMachineRef T);

/** Returns the triple used creating this target machine. See
  llvm37::TargetMachine::getTriple. The result needs to be disposed with
  LLVM37DisposeMessage. */
char *LLVM37GetTargetMachineTriple(LLVM37TargetMachineRef T);

/** Returns the cpu used creating this target machine. See
  llvm37::TargetMachine::getCPU. The result needs to be disposed with
  LLVM37DisposeMessage. */
char *LLVM37GetTargetMachineCPU(LLVM37TargetMachineRef T);

/** Returns the feature string used creating this target machine. See
  llvm37::TargetMachine::getFeatureString. The result needs to be disposed with
  LLVM37DisposeMessage. */
char *LLVM37GetTargetMachineFeatureString(LLVM37TargetMachineRef T);

/** Deprecated: use LLVM37GetDataLayout(LLVM37ModuleRef M) instead. */
LLVM37TargetDataRef LLVM37GetTargetMachineData(LLVM37TargetMachineRef T);

/** Set the target machine's ASM verbosity. */
void LLVM37SetTargetMachineAsmVerbosity(LLVM37TargetMachineRef T,
                                      LLVM37Bool VerboseAsm);

/** Emits an asm or object file for the given module to the filename. This
  wraps several c++ only classes (among them a file stream). Returns any
  error in ErrorMessage. Use LLVM37DisposeMessage to dispose the message. */
LLVM37Bool LLVM37TargetMachineEmitToFile(LLVM37TargetMachineRef T, LLVM37ModuleRef M,
  _In_ char *Filename, LLVM37CodeGenFileType codegen, 
  _Out_opt_ char **ErrorMessage);

/** Compile the LLVM37 IR stored in \p M and store the result in \p OutMemBuf. */
LLVM37Bool LLVM37TargetMachineEmitToMemoryBuffer(LLVM37TargetMachineRef T, LLVM37ModuleRef M,
    LLVM37CodeGenFileType codegen, 
    _Out_opt_ char** ErrorMessage, LLVM37MemoryBufferRef *OutMemBuf);

/*===-- Triple ------------------------------------------------------------===*/
/** Get a triple for the host machine as a string. The result needs to be
  disposed with LLVM37DisposeMessage. */
char* LLVM37GetDefaultTargetTriple(void);

/** Adds the target-specific analysis passes to the pass manager. */
void LLVM37AddAnalysisPasses(LLVM37TargetMachineRef T, LLVM37PassManagerRef PM);

#ifdef __cplusplus
}
#endif

#endif
